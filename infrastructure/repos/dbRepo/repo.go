package dbRepo

import (
	"github.com/jmoiron/sqlx"
	_ "github.com/lib/pq"
	"todomodule/app"
	"todomodule/domain"
)

var schema = `CREATE TABLE if not exists todos (
id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
todo  text NOT NULL,
UNIQUE(todo)
)`

var makeunique = `ALTER TABLE todos
ADD CONSTRAINT todo UNIQUE (todo);`

type dbRepo struct {
	db *sqlx.DB
}

func (r dbRepo) Update(todoNew domain.Todo, todoOld domain.Todo) error {
	_, err := r.db.Exec(`
	UPDATE todos
	SET todo=$1
	WHERE
	todo=$2;`, todoNew.Name, todoOld.Name)
	return err
}

func (r dbRepo) Delete(todo domain.Todo) error {
	_, err := r.db.Exec(`
	DELETE FROM todos WHERE todo=($1)`, todo.Name)
	return err
}

func (r dbRepo) MakeUniqueTodoQuery() error {
	_, err := r.db.Exec(makeunique)
	return err
}
func (r dbRepo) Create(todo domain.Todo) error {
	_, err := r.db.Exec(`
	INSERT INTO todos (todo) VALUES ($1) on conflict do nothing`, todo.Name)
	return err
}
func (r dbRepo) GetAll() ([]domain.Todo, error) {
	var todos []Todo
	err := r.db.Select(&todos, "select * from todos")

	domainTodos := make([]domain.Todo, 0, len(todos))
	for i := range todos {
		domainTodos = append(domainTodos, domain.Todo{Name: todos[i].Name})
	}
	return domainTodos, err
}

func NewDbRepo(db *sqlx.DB) (app.Repo, error) {
	_, err := db.Exec(schema)
	return &dbRepo{db: db}, err
}
